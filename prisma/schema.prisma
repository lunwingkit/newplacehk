generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id             String                  @id @default(cuid())
  name           String?
  email          String?                 @unique
  emailVerified  DateTime?
  image          String?
  age            Int?
  gender         String?
  interests      String[]
  introduction   String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  // Relations
  signedUpEvents EventsSignedUpByUsers[]
  starredEvents  StarredEvents[]
  hostedEvents   EventsHostedByUsers[]
}

model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  image       String?
  slug        String   @unique
  author      String?
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(false)
  tags        String[]
}

model Event {
  id            String                  @id @default(cuid())
  title         String
  description   String
  startDate     DateTime
  endDate       DateTime
  location      String
  image         String?
  capacity      Int
  category      String?
  status        EventStatus             @default(PREPARING)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  priceSchemes  PriceScheme[]
  signedUpUsers EventsSignedUpByUsers[]
  hostedByUsers EventsHostedByUsers[]
  starredByUsers StarredEvents[]
}

model PriceScheme {
  id            String                  @id @default(cuid())
  name          String
  description   String?
  price         Float
  event         Event                   @relation(fields: [eventId], references: [id])
  eventId       String
  registrations EventsSignedUpByUsers[]

  @@index([eventId])
}

model EventsSignedUpByUsers {
  id            String       @id @default(cuid())
  userId        String
  eventId       String
  priceScheme   PriceScheme  @relation(fields: [priceSchemeId], references: [id])
  priceSchemeId String
  signedUpAt    DateTime     @default(now())
  status        SignUpStatus @default(PENDING)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  event         Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model EventsHostedByUsers {
  id       String   @id @default(cuid())
  userId   String
  eventId  String
  role     HostRole @default(HOST)
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model StarredEvents {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  starredAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

enum EventStatus {
  PREPARING
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}

enum SignUpStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum HostRole {
  HOST
  CO_HOST
  ASSISTANT
}